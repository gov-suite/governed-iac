import { transformDockerArtifacts } from "../../core/docker/transform.ts";
import type { ConfiguredServices } from "../../core/service.ts";
import {
  artfPersist as ap,
  contextMgr as cm,
  specModule as sm,
  testingAsserts as ta,
} from "../deps.ts";
import * as iacModel from "./deno.service.giac.ts";

const serviceScript = `# Code generated by Netspective IGS. DO NOT EDIT.

/deno run -A --unstable https://denopkg.com/gov-suite/governed-text-template@v0.3.3/toctl.ts server --module=file:///medigy-tx-email-messages.ts,medigy-email --default-module=./mod_test-html-email-messages.ts --verbose`;

const dockerfile = `# Code generated by Netspective IGS. DO NOT EDIT.

FROM alpine:3.9.2
RUN apk add --no-cache curl
RUN curl -L https://deno.land/x/install/install.sh | sh
FROM gcr.io/distroless/cc
COPY --from=0 /root/.deno/bin/deno /
COPY . /`;

const dockerCompose = `# Code generated by Netspective IGS. DO NOT EDIT.


version: '3.3'
services:
  deno:
    container_name: deno_service
    build:
      context: .
      dockerfile: Dockerfile-deno
    image: 'deno_service:latest'
    restart: always
    command:
      - /deno-service.sh
`;

Deno.test(
  "deno service Dockerfile and docker-compose.yaml Transformer",
  async () => {
    const ctx = cm.ctxFactory.projectContext(".");
    const p = new ap.InMemoryPersistenceHandler();
    transformDockerArtifacts(
      {
        projectCtx: ctx,
        name: "graph",
        spec: sm.specFactory.spec<ConfiguredServices>(
          new iacModel.DenoServicesConfig(
            ctx,
            iacModel.denoServiceOptions({
              serviceLaunchCommands: [
                `/deno run -A --unstable https://denopkg.com/gov-suite/governed-text-template@v0.3.3/toctl.ts server --module=file:///medigy-tx-email-messages.ts,medigy-email --default-module=./mod_test-html-email-messages.ts --verbose`,
              ],
            }),
          ),
        ),
        persist: p,
        composeBuildContext: ctx.projectPath,
      },
    );

    ta.assertEquals(3, p.resultsMap.size);
    ta.assertEquals(
      p.resultsMap.get("deno-service.sh")?.artifactText,
      serviceScript,
    );
    ta.assertEquals(
      p.resultsMap.get("Dockerfile-deno")?.artifactText,
      dockerfile,
    );
    ta.assertEquals(
      p.resultsMap.get("docker-compose.yaml")?.artifactText,
      dockerCompose,
    );
  },
);
