import { transformDockerArtifacts } from "../../core/docker/transform.ts";
import type { ConfiguredServices } from "../../core/service.ts";
import {
  artfPersist as ap,
  contextMgr as cm,
  specModule as sm,
  testingAsserts as ta,
} from "../deps.ts";
import * as iacModel from "./deno.service.giac.ts";

const dockerfile = `# Code generated by Netspective IGS. DO NOT EDIT.

FROM debian:stable-slim as build
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get -qqq update && apt-get install -qqq curl unzip
RUN curl -L https://deno.land/x/install/install.sh | sh
COPY deps.ts .
RUN /root/.deno/bin/deno cache --unstable deps.ts
RUN /root/.deno/bin/deno cache --unstable https://denopkg.com/gov-suite/governed-text-template@v0.3.3/toctl.ts
FROM gcr.io/distroless/cc-debian10
COPY --from=build /root/.deno/bin/deno /
COPY --from=build /root/.cache/deno /root/.cache/deno
COPY . .
EXPOSE 8164
ENTRYPOINT ["/deno","run","-A","--unstable","https://denopkg.com/gov-suite/governed-text-template@v0.3.3/toctl.ts","server","--port=8164","--module=file:///medigy-tx-email-messages.ts,medigy-email","--default-module=./mod_test-html-email-messages.ts","--verbose"]`;

const dockerCompose = `# Code generated by Netspective IGS. DO NOT EDIT.


version: '3.3'
services:
  deno:
    container_name: medigy_tx_email
    build:
      context: .
      dockerfile: Dockerfile
    image: 'medigy_tx_email:latest'
    restart: always
`;

Deno.test(
  "deno service Dockerfile and docker-compose.yaml Transformer",
  async () => {
    const port = 8164;
    const toctl =
      "https://denopkg.com/gov-suite/governed-text-template@v0.3.3/toctl.ts";
    const ctx = cm.ctxFactory.projectContext(".");
    const p = new ap.InMemoryPersistenceHandler();
    transformDockerArtifacts(
      {
        projectCtx: ctx,
        name: "graph",
        spec: sm.specFactory.spec<ConfiguredServices>(
          new iacModel.DenoServicesConfig(
            ctx,
            iacModel.denoServiceOptions({
              imageTag: "medigy_tx_email",
              port: port,
              cacheURLs: ["deps.ts", toctl],
              entryPoint: [
                "/deno",
                "run",
                "-A",
                "--unstable",
                toctl,
                "server",
                `--port=${port}`,
                "--module=file:///medigy-tx-email-messages.ts,medigy-email",
                "--default-module=./mod_test-html-email-messages.ts",
                "--verbose",
              ],
            }),
          ),
        ),
        persist: p,
        composeBuildContext: ctx.projectPath,
        composeYamlOptions: { lineWidth: 512 },
      },
    );

    ta.assertEquals(2, p.resultsMap.size);
    ta.assertEquals(
      p.resultsMap.get("Dockerfile")?.artifactText,
      dockerfile,
    );
    ta.assertEquals(
      p.resultsMap.get("docker-compose.yaml")?.artifactText,
      dockerCompose,
    );
  },
);
