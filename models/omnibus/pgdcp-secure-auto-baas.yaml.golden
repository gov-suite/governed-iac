# Code generated by Netspective IGS. DO NOT EDIT.

#
# Environment variables allowed:
#   * POSTGRESQLENGINE_USER - pgDCP database user (required)
#   * POSTGRESQLENGINE_PASSWORD - pgDCP database password (required)
#   * POSTGRESQLENGINE_HOST - pgDCP database host (required)
#   * POSTGRESQLENGINE_PORT - pgDCP database port (required)
#   * POSTGRESQLENGINE_DB - pgDCP database name (required)
#   * PGDCP_GIT_REPO_USERNAME - GitLab user (required)
#   * PGDCP_GIT_REPO_TOKEN - GitLab user Token (required)
#   * PGDCP_POSTGRAPHILE_ANONYMOUS_REPO - pgDCP postgraphile ananymous repository (required)
#   * PGDCP_POSTGRAPHILE_ANONYMOUS_REPO_BRANCH - pgDCP postgraphile ananymous repository branch (required)
#   * PGDCP_JWKS_URI - GitLab JSON Web Key Set URL endpoint, eg:- https://git.netspective.io/oauth/discovery/keys (required)
#   * PGDCP_ISSUER - IDP endpoint URL (required)
#   * PGDCP_ANONYMOUS_SCHEMA - pgDCP anonymous postgraphile schemas (required)
#   * PGDCP_POSTGRAPHILE_REPO - pgDCP postgraphile shield repository (required)
#   * PGDCP_POSTGRAPHILE_REPO_BRANCH - pgDCP postgraphile shield repository branch (required)
#   * PGDCP_SCHEMA - pgDCP postgraphile schemas (required)
#   * LETSENCRYPT_SSL_EMAIL_ID - Email id for ACME Let's Encrypt certificates for https endpoints (required)
#   * EP_EXECENV - Endpoints' execution environment name like sandbox, devl, test, demo, or prod (default sandbox)
#   * EP_BOUNDARY - Endpoints' name of application or service (default appx)
#   * EP_FQDNSUFFIX - Endpoints' Fully qualified domain name suffix (default docker.localhost)
#   * POSTGRAPHILEANONYMOUS_PGDCP_EXPOSE_PORT - PGDCP POSTGRAPHILE ANONYMOUS EXPOSE PORT (default 5000)
#   * POSTGRAPHILE_PGDCP_EXPOSE_PORT - PGDCP POSTGRAPHILE EXPOSE PORT (default 5000)
#   * POSTGRESTANONYMOUS_PGDCP_EXPOSE_PORT - POSTGRESTANONYMOUS PGDCP EXPOSE PORT (default 3000)
#   * POSTGREST_PGDCP_EXPOSE_PORT - POSTGRESTANONYMOUS PGDCP EXPOSE PORT (default 3000)

version: '3.3'
services:
  postgres-exporter:
    container_name: middleware-rdbms-auto-baas_postgres-exporter
    image: quay.io/prometheuscommunity/postgres-exporter
    restart: always
    ports:
      - '9187:9187'
    environment:
      DATA_SOURCE_NAME: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}?sslmode=disable
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postgres-exporter-https-redirect.entrypoints: http
      traefik.http.routers.postgres-exporter-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postgres-exporter-https-redirect.middlewares: postgres-exporter-https-redirect
      traefik.http.middlewares.postgres-exporter-https-redirect.redirectscheme.scheme: https
      traefik.http.services.postgres-exporter-https-redirect.loadbalancer.server.port: 9187
      traefik.http.routers.postgres-exporter.entrypoints: https
      traefik.http.routers.postgres-exporter.tls.certresolver: default
      traefik.http.routers.postgres-exporter.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postgres-exporter.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  postGraphileAnonymous:
    container_name: middleware-rdbms-auto-baas_postGraphileAnonymous
    build:
      context: .
      dockerfile: Dockerfile-postGraphileAnonymous
      args:
        PGDCP_GIT_REPO_USERNAME: '${PGDCP_GIT_REPO_USERNAME}'
        PGDCP_GIT_REPO_TOKEN: '${PGDCP_GIT_REPO_TOKEN}'
        PGDCP_POSTGRAPHILE_ANONYMOUS_REPO: '${PGDCP_POSTGRAPHILE_ANONYMOUS_REPO}'
        PGDCP_POSTGRAPHILE_ANONYMOUS_REPO_BRANCH: '${PGDCP_POSTGRAPHILE_ANONYMOUS_REPO_BRANCH}'
    image: 'middleware-rdbms-auto-baas_postgraphileanonymous:latest'
    restart: always
    ports:
      - '${POSTGRAPHILEANONYMOUS_PGDCP_EXPOSE_PORT:-5000}:5000'
    environment:
      DATABASE_URL: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      JWKS_URI: '${PGDCP_JWKS_URI}'
      ISSUER: '${PGDCP_ISSUER}'
      SCHEMA: '${PGDCP_ANONYMOUS_SCHEMA}'
      PORT: 5000
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postGraphileAnonymous-https-redirect.entrypoints: http
      traefik.http.routers.postGraphileAnonymous-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postGraphileAnonymous-https-redirect.middlewares: postGraphileAnonymous-https-redirect
      traefik.http.middlewares.postGraphileAnonymous-https-redirect.redirectscheme.scheme: https
      traefik.http.routers.postGraphileAnonymous.entrypoints: https
      traefik.http.routers.postGraphileAnonymous.tls.certresolver: default
      traefik.http.routers.postGraphileAnonymous.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  postGraphile:
    container_name: middleware-rdbms-auto-baas_postGraphile
    build:
      context: .
      dockerfile: Dockerfile-postGraphile
      args:
        PGDCP_GIT_REPO_USERNAME: '${PGDCP_GIT_REPO_USERNAME}'
        PGDCP_GIT_REPO_TOKEN: '${PGDCP_GIT_REPO_TOKEN}'
        PGDCP_POSTGRAPHILE_REPO: '${PGDCP_POSTGRAPHILE_REPO}'
        PGDCP_POSTGRAPHILE_REPO_BRANCH: '${PGDCP_POSTGRAPHILE_REPO_BRANCH}'
    image: 'middleware-rdbms-auto-baas_postgraphile:latest'
    restart: always
    ports:
      - '${POSTGRAPHILE_PGDCP_EXPOSE_PORT:-5000}:5000'
    environment:
      DATABASE_URL: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      JWKS_URI: '${PGDCP_JWKS_URI}'
      ISSUER: '${PGDCP_ISSUER}'
      SCHEMA: '${PGDCP_SCHEMA}'
      PORT: 5000
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postGraphile-https-redirect.entrypoints: http
      traefik.http.routers.postGraphile-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postGraphile-https-redirect.middlewares: postGraphile-https-redirect
      traefik.http.middlewares.postGraphile-https-redirect.redirectscheme.scheme: https
      traefik.http.routers.postGraphile.entrypoints: https
      traefik.http.routers.postGraphile.tls.certresolver: default
      traefik.http.routers.postGraphileInterface.tls.certresolver: default
      traefik.http.routers.postGraphile.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && Path(`/shield/graphql`)
      traefik.http.routers.postGraphileInterface.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && Path(`/shield/graphiql`)
  postgRESTAnonymous:
    container_name: middleware-rdbms-auto-baas_postgRESTAnonymous
    image: postgrest/postgrest
    restart: always
    ports:
      - '${POSTGRESTANONYMOUS_PGDCP_EXPOSE_PORT:-3000}:3000'
    environment:
      PGRST_DB_URI: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      PGRST_DB_SCHEMA: '${PGDCP_ANONYMOUS_SCHEMA}'
      PGRST_DB_ANON_ROLE: '${POSTGRESQLENGINE_USER}'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postgRESTAnonymous-https-redirect.entrypoints: http
      traefik.http.routers.postgRESTAnonymous-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postgRESTAnonymous-https-redirect.middlewares: postgRESTAnonymous-https-redirect
      traefik.http.middlewares.postgRESTAnonymous-https-redirect.redirectscheme.scheme: https
      traefik.http.services.postgRESTAnonymous-https-redirect.loadbalancer.server.port: 3000
      traefik.http.routers.postgRESTAnonymous.entrypoints: https
      traefik.http.routers.postgRESTAnonymous.tls.certresolver: default
      traefik.http.routers.postgRESTAnonymous.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && Path(`/api`)
      traefik.http.routers.postgRESTAnonymous.middlewares: replacepath-middleware-postgRESTAnonymous
      traefik.http.middlewares.replacepath-middleware-postgRESTAnonymous.replacepath.path: /
  postgREST:
    container_name: middleware-rdbms-auto-baas_postgREST
    image: postgrest/postgrest
    restart: always
    ports:
      - '${POSTGREST_PGDCP_EXPOSE_PORT:-3000}:3000'
    environment:
      PGRST_DB_URI: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      PGRST_DB_SCHEMA: '${PGDCP_SCHEMA}'
      PGRST_DB_ANON_ROLE: '${POSTGRESQLENGINE_USER}'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postgREST-https-redirect.entrypoints: http
      traefik.http.routers.postgREST-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postgREST-https-redirect.middlewares: postgREST-https-redirect
      traefik.http.middlewares.postgREST-https-redirect.redirectscheme.scheme: https
      traefik.http.services.postgREST-https-redirect.loadbalancer.server.port: 3000
      traefik.http.routers.postgREST.entrypoints: https
      traefik.http.routers.postgREST.tls.certresolver: default
      traefik.http.routers.postgREST.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && Path(`/shield/api`)
      traefik.http.routers.postgREST.middlewares: replacepath-middleware-postgREST
      traefik.http.middlewares.replacepath-middleware-postgREST.replacepath.path: /
  adminer-app:
    container_name: middleware-rdbms-auto-baas_adminer-app
    image: adminer
    restart: always
    environment:
      ADMINER_DESIGN: pepa-linha
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.adminer-app-https-redirect.entrypoints: http
      traefik.http.routers.adminer-app-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.adminer-app-https-redirect.middlewares: adminer-app-https-redirect
      traefik.http.middlewares.adminer-app-https-redirect.redirectscheme.scheme: https
      traefik.http.services.adminer-app-https-redirect.loadbalancer.server.port: 8080
      traefik.http.routers.adminer-app.entrypoints: https
      traefik.http.routers.adminer-app.tls.certresolver: default
      traefik.http.routers.adminer-app.rule: >-
        Host(`${EP_EXECENV:-sandbox}.adminer-app.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  graphql-exporter:
    container_name: middleware-rdbms-auto-baas_graphql-exporter
    image: quay.io/ricardbejarano/graphql_exporter
    restart: always
    ports:
      - '9199:9199'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.graphql-exporter-https-redirect.entrypoints: http
      traefik.http.routers.graphql-exporter-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.graphql-exporter-https-redirect.middlewares: graphql-exporter-https-redirect
      traefik.http.middlewares.graphql-exporter-https-redirect.redirectscheme.scheme: https
      traefik.http.services.graphql-exporter-https-redirect.loadbalancer.server.port: 9199
      traefik.http.routers.graphql-exporter.entrypoints: https
      traefik.http.routers.graphql-exporter.tls.certresolver: default
      traefik.http.routers.graphql-exporter.rule: >-
        Host(`${EP_EXECENV:-sandbox}.graphql-exporter.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  check-if-email-exists:
    container_name: middleware-rdbms-auto-baas_check-if-email-exists
    image: 'reacherhq/check-if-email-exists:latest'
    restart: always
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.check-if-email-exists-https-redirect.entrypoints: http
      traefik.http.routers.check-if-email-exists-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.check-if-email-exists-https-redirect.middlewares: check-if-email-exists-https-redirect
      traefik.http.middlewares.check-if-email-exists-https-redirect.redirectscheme.scheme: https
      traefik.http.services.check-if-email-exists-https-redirect.loadbalancer.server.port: 3000
      traefik.http.routers.check-if-email-exists.entrypoints: https
      traefik.http.routers.check-if-email-exists.tls.certresolver: default
      traefik.http.routers.check-if-email-exists.rule: 'Host(`email.validation.infra.${EP_FQDNSUFFIX:-docker.localhost}`)'
  reverse-proxy:
    container_name: middleware-rdbms-auto-baas_reverse-proxy
    image: 'traefik:2.2'
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '8099:8080'
    depends_on:
      - postgres-exporter
      - postGraphileAnonymous
      - postGraphile
      - postgRESTAnonymous
      - postgREST
      - adminer-app
      - graphql-exporter
      - check-if-email-exists
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './acme.json:/acme.json'
    networks:
      - network
    command:
      - '--providers.docker=true'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.exposedByDefault=false'
      - '--api.dashboard=true'
      - '--api.insecure=true'
      - '--accesslog=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.https.address=:443'
      - '--certificatesResolvers.default.acme.email=${LETSENCRYPT_SSL_EMAIL_ID}'
      - '--certificatesResolvers.default.acme.storage=/acme.json'
      - '--certificatesResolvers.default.acme.httpchallenge=true'
      - '--certificatesresolvers.default.acme.httpchallenge.entrypoint=http'
      - '--entryPoints.https.forwardedHeaders.insecure'
networks:
  network:
    external:
      name: middleware-rdbms-auto-baas
