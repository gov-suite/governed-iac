# Code generated by Netspective IGS. DO NOT EDIT.

# Mutable volumes to be mindful of:
#   postgraphileupload-storage: Irrecoverable user generated and transactional content
#   openproject-storage: Irrecoverable user generated and transactional content
#   openldap_storage-lib: Irrecoverable user generated and transactional content
#   openldap_storage-etc: Irrecoverable user generated and transactional content
#   openldap_storage-cert: Irrecoverable user generated and transactional content
#
# Environment variables allowed:
#   * POSTGRESQLENGINE_USER - pgDCP database user (required)
#   * POSTGRESQLENGINE_PASSWORD - pgDCP database password (required)
#   * POSTGRESQLENGINE_HOST - pgDCP database host (required)
#   * POSTGRESQLENGINE_PORT - pgDCP database port (required)
#   * POSTGRESQLENGINE_DB - pgDCP database name (required)
#   * PGDCP_GIT_REPO_USERNAME - GitLab user (required)
#   * PGDCP_GIT_REPO_TOKEN - GitLab user Token (required)
#   * PGDCP_POSTGRAPHILE_ANONYMOUS_REPO - pgDCP postgraphile ananymous repository (required)
#   * PGDCP_POSTGRAPHILE_ANONYMOUS_REPO_BRANCH - pgDCP postgraphile ananymous repository branch (required)
#   * PGDCP_ANONYMOUS_SCHEMA - pgDCP anonymous postgraphile schemas (required)
#   * PGDCP_POSTGRAPHILE_REPO - pgDCP postgraphile shield repository (required)
#   * PGDCP_POSTGRAPHILE_REPO_BRANCH - pgDCP postgraphile shield repository branch (required)
#   * PGDCP_SCHEMA - pgDCP postgraphile schemas (required)
#   * POSTGRESQLENGINE_KEYCLOAK_DB - PgDCP keycloak database (required)
#   * JWKS_URI - Keycloak JWKS URL (required)
#   * ISSUER - Keycloak Realm URL (required)
#   * POSTGRESQLENGINE_UNLEASH_DB - PgDCP unleash database (required)
#   * POSTGRESQLENGINE_OPENPROJECT_DB - PgDCP openproject database (required)
#   * PGDCP_OP_SECRET_KEY_BASE - Openproject secret key used for cookies (required)
#   * OPENLDAP_PGDCP_DOMAIN - Ldap domain (required)
#   * OPENLDAP_PGDCP_ADMIN_PASSWORD - Ldap Admin password (required)
#   * LETSENCRYPT_SSL_EMAIL_ID - Email id for ACME Let's Encrypt certificates for https endpoints (required)
#   * EP_EXECENV - Endpoints' execution environment name like sandbox, devl, test, demo, or prod (default sandbox)
#   * EP_BOUNDARY - Endpoints' name of application or service (default appx)
#   * EP_FQDNSUFFIX - Endpoints' Fully qualified domain name suffix (default docker.localhost)
#   * POSTGRAPHILEANONYMOUS_PGDCP_EXPOSE_PORT - PGDCP POSTGRAPHILE ANONYMOUS EXPOSE PORT (default 5000)
#   * POSTGRAPHILE_PGDCP_EXPOSE_PORT - PGDCP POSTGRAPHILE EXPOSE PORT (default 5000)
#   * POSTGRESTANONYMOUS_PGDCP_EXPOSE_PORT - POSTGRESTANONYMOUS PGDCP EXPOSE PORT (default 3000)
#   * POSTGREST_PGDCP_EXPOSE_PORT - POSTGRESTANONYMOUS PGDCP EXPOSE PORT (default 3000)
#   * OPENLDAP_PGDCP_EXPOSE_PORT - OPENLDAP PGDCP EXPOSE PORT (default 389)

version: '3.3'
services:
  postgres-exporter:
    container_name: middleware-rdbms-auto-baas_postgres-exporter
    image: quay.io/prometheuscommunity/postgres-exporter
    restart: always
    ports:
      - '9187:9187'
    environment:
      DATA_SOURCE_NAME: >-
        postgres://${POSTGRESQLENGINE_OWNER_USER}:${POSTGRESQLENGINE_OWNER_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}?sslmode=disable
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postgres-exporter-https-redirect.entrypoints: http
      traefik.http.routers.postgres-exporter-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postgres-exporter-https-redirect.middlewares: postgres-exporter-https-redirect
      traefik.http.middlewares.postgres-exporter-https-redirect.redirectscheme.scheme: https
      traefik.http.services.postgres-exporter-https-redirect.loadbalancer.server.port: 9187
      traefik.http.routers.postgres-exporter.entrypoints: https
      traefik.http.routers.postgres-exporter.tls.certresolver: default
      traefik.http.routers.postgres-exporter.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postgres-exporter.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  postGraphileAnonymous:
    container_name: middleware-rdbms-auto-baas_postGraphileAnonymous
    build:
      context: .
      dockerfile: Dockerfile-postGraphileAnonymous
      args:
        PGDCP_GIT_REPO_USERNAME: '${PGDCP_GIT_REPO_USERNAME}'
        PGDCP_GIT_REPO_TOKEN: '${PGDCP_GIT_REPO_TOKEN}'
        PGDCP_POSTGRAPHILE_ANONYMOUS_REPO: '${PGDCP_POSTGRAPHILE_ANONYMOUS_REPO}'
        PGDCP_POSTGRAPHILE_ANONYMOUS_REPO_BRANCH: '${PGDCP_POSTGRAPHILE_ANONYMOUS_REPO_BRANCH}'
    image: 'middleware-rdbms-auto-baas_postgraphileanonymous:latest'
    restart: always
    ports:
      - '${POSTGRAPHILEANONYMOUS_PGDCP_EXPOSE_PORT:-5000}:5000'
    environment:
      DATABASE_URL: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      SCHEMA: '${PGDCP_ANONYMOUS_SCHEMA}'
      PORT: 5000
      DOMAIN: '${PGDCP_POSTGRAPHILE_COOKIE_DOMAIN}'
      COOKIE_MAXAGE: '${PGDCP_POSTGRAPHILE_COOKIE_MAXAGE}'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postGraphileAnonymous-https-redirect.entrypoints: http
      traefik.http.routers.postGraphileAnonymous-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postGraphileAnonymous-https-redirect.middlewares: postGraphileAnonymous-https-redirect
      traefik.http.middlewares.postGraphileAnonymous-https-redirect.redirectscheme.scheme: https
      traefik.http.routers.postGraphileAnonymous.entrypoints: https
      traefik.http.routers.postGraphileAnonymous.tls.certresolver: default
      traefik.http.routers.postGraphileAnonymous.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.http.routers.postGraphileAnonymous.middlewares: postGraphileAnonymous-cors
      traefik.http.middlewares.postGraphileAnonymous-cors.headers.customresponseheaders.Access-Control-Allow-Headers: '*'
      traefik.http.middlewares.postGraphileAnonymous-cors.headers.customresponseheaders.Access-Control-Allow-Methods: 'GET,POST,PUT,PATCH,DELETE,OPTIONS'
      traefik.http.middlewares.postGraphileAnonymous-cors.headers.customresponseheaders.Access-Control-Allow-Origin: '*'
  postGraphile:
    container_name: middleware-rdbms-auto-baas_postGraphile
    build:
      context: .
      dockerfile: Dockerfile-postGraphile
      args:
        PGDCP_GIT_REPO_USERNAME: '${PGDCP_GIT_REPO_USERNAME}'
        PGDCP_GIT_REPO_TOKEN: '${PGDCP_GIT_REPO_TOKEN}'
        PGDCP_POSTGRAPHILE_REPO: '${PGDCP_POSTGRAPHILE_REPO}'
        PGDCP_POSTGRAPHILE_REPO_BRANCH: '${PGDCP_POSTGRAPHILE_REPO_BRANCH}'
    image: 'middleware-rdbms-auto-baas_postgraphile:latest'
    restart: always
    ports:
      - '${POSTGRAPHILE_PGDCP_EXPOSE_PORT:-5000}:5000'
    environment:
      DATABASE_URL: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      OWNER_CONNECTION_STRING: >-
        postgres://${POSTGRESQLENGINE_OWNER_USER}:${POSTGRESQLENGINE_OWNER_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      SCHEMA: '${PGDCP_SCHEMA}'
      KEYCLOAK_CLIENT_ID: '${KEYCLOAK_CLIENT_ID}'
      JWKS_URI: '${KEYCLOAK_SERVER_URL}/auth/realms/'
      ISSUER: '${KEYCLOAK_SERVER_URL}/auth/realms/'
      PORT: 5000
      DOMAIN: '${PGDCP_POSTGRAPHILE_COOKIE_DOMAIN}'
      COOKIE_MAXAGE: '${PGDCP_POSTGRAPHILE_COOKIE_MAXAGE}'
    volumes:
      - 'postgraphileupload-storage:/src/shield/src/uploads'
    extra_hosts:
      - >-
        ${EP_EXECENV:-sandbox}.keycloak.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}:${HOST_MACHINE_IP}
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postGraphile-https-redirect.entrypoints: http
      traefik.http.routers.postGraphile-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postGraphile-https-redirect.middlewares: postGraphile-https-redirect
      traefik.http.middlewares.postGraphile-https-redirect.redirectscheme.scheme: https
      traefik.http.routers.postGraphile.entrypoints: https
      traefik.http.routers.postGraphile.tls.certresolver: default
      traefik.http.routers.postGraphileInterface.tls.certresolver: default
      traefik.http.routers.postGraphile.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && Path(`/shield/graphql`)
      traefik.http.routers.postGraphileInterface.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && Path(`/shield/graphiql`)
      traefik.http.routers.postGraphileUploads.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && PathPrefix(`/shield/src/uploads`)
      traefik.http.routers.postGraphile.middlewares: postGraphile-cors
      traefik.http.middlewares.postGraphile-cors.headers.customresponseheaders.Access-Control-Allow-Headers: '*'
      traefik.http.middlewares.postGraphile-cors.headers.customresponseheaders.Access-Control-Allow-Methods: 'GET,POST,PUT,PATCH,DELETE,OPTIONS'
      traefik.http.middlewares.postGraphile-cors.headers.customresponseheaders.Access-Control-Allow-Origin: '*'
  postgRESTAnonymous:
    container_name: middleware-rdbms-auto-baas_postgRESTAnonymous
    image: postgrest/postgrest
    restart: always
    ports:
      - '${POSTGRESTANONYMOUS_PGDCP_EXPOSE_PORT:-3000}:3000'
    environment:
      PGRST_DB_URI: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      PGRST_DB_SCHEMA: '${PGDCP_ANONYMOUS_SCHEMA}'
      PGRST_DB_ANON_ROLE: '${POSTGRESQLENGINE_USER}'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postgRESTAnonymous-https-redirect.entrypoints: http
      traefik.http.routers.postgRESTAnonymous-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postgRESTAnonymous-https-redirect.middlewares: postgRESTAnonymous-https-redirect
      traefik.http.middlewares.postgRESTAnonymous-https-redirect.redirectscheme.scheme: https
      traefik.http.routers.postgRESTAnonymous.entrypoints: https
      traefik.http.routers.postgRESTAnonymous.tls.certresolver: default
      traefik.http.routers.postgRESTAnonymous.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && PathPrefix(`/api`)
      traefik.http.routers.postgRESTAnonymous.middlewares: replacepath-middleware-postgRESTAnonymous
      traefik.http.middlewares.replacepath-middleware-postgRESTAnonymous.replacepathRegex.regex: ^/api(.*)
      traefik.http.middlewares.replacepath-middleware-postgRESTAnonymous.replacepathRegex.replacement: $$1
  postgREST:
    container_name: middleware-rdbms-auto-baas_postgREST
    image: postgrest/postgrest
    restart: always
    ports:
      - '${POSTGREST_PGDCP_EXPOSE_PORT:-3000}:3000'
    environment:
      PGRST_DB_URI: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_DB}
      PGRST_DB_SCHEMA: '${PGDCP_SCHEMA}'
      PGRST_DB_ANON_ROLE: '${POSTGRESQLENGINE_USER}'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postgREST-https-redirect.entrypoints: http
      traefik.http.routers.postgREST-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postgREST-https-redirect.middlewares: postgREST-https-redirect
      traefik.http.middlewares.postgREST-https-redirect.redirectscheme.scheme: https
      traefik.http.routers.postgREST.entrypoints: https
      traefik.http.routers.postgREST.tls.certresolver: default
      traefik.http.routers.postgREST.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && PathPrefix(`/shield/api`)
      traefik.http.routers.postgREST.middlewares: replacepath-middleware-postgREST
      traefik.http.middlewares.replacepath-middleware-postgREST.replacepathRegex.regex: ^/shield/api(.*)
      traefik.http.middlewares.replacepath-middleware-postgREST.replacepathRegex.replacement: $$1
  adminer-app:
    container_name: middleware-rdbms-auto-baas_adminer-app
    image: adminer
    restart: always
    environment:
      ADMINER_DESIGN: pepa-linha
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.adminer-app-https-redirect.entrypoints: http
      traefik.http.routers.adminer-app-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.adminer-app-https-redirect.middlewares: adminer-app-https-redirect
      traefik.http.middlewares.adminer-app-https-redirect.redirectscheme.scheme: https
      traefik.http.services.adminer-app-https-redirect.loadbalancer.server.port: 8080
      traefik.http.routers.adminer-app.entrypoints: https
      traefik.http.routers.adminer-app.tls.certresolver: default
      traefik.http.routers.adminer-app.rule: >-
        Host(`${EP_EXECENV:-sandbox}.adminer-app.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  graphql-exporter:
    container_name: middleware-rdbms-auto-baas_graphql-exporter
    image: quay.io/ricardbejarano/graphql_exporter
    restart: always
    ports:
      - '9199:9199'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.graphql-exporter-https-redirect.entrypoints: http
      traefik.http.routers.graphql-exporter-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.graphql-exporter-https-redirect.middlewares: graphql-exporter-https-redirect
      traefik.http.middlewares.graphql-exporter-https-redirect.redirectscheme.scheme: https
      traefik.http.services.graphql-exporter-https-redirect.loadbalancer.server.port: 9199
      traefik.http.routers.graphql-exporter.entrypoints: https
      traefik.http.routers.graphql-exporter.tls.certresolver: default
      traefik.http.routers.graphql-exporter.rule: >-
        Host(`${EP_EXECENV:-sandbox}.graphql-exporter.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  email-validator:
    container_name: middleware-rdbms-auto-baas_email-validator
    image: 'reacherhq/check-if-email-exists:latest'
    restart: always
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.email-validator-https-redirect.entrypoints: http
      traefik.http.routers.email-validator-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.email-validator-https-redirect.middlewares: email-validator-https-redirect
      traefik.http.middlewares.email-validator-https-redirect.redirectscheme.scheme: https
      traefik.http.services.email-validator-https-redirect.loadbalancer.server.port: 3000
      traefik.http.routers.email-validator.entrypoints: https
      traefik.http.routers.email-validator.tls.certresolver: default
      traefik.http.routers.email-validator.rule: 'Host(`email.validation.infra.${EP_FQDNSUFFIX:-docker.localhost}`)'
  swagger-ui:
    container_name: middleware-rdbms-auto-baas_swagger-ui
    image: swaggerapi/swagger-ui
    restart: always
    ports:
      - '8080:8080'
    depends_on:
      - postgRESTAnonymous
      - postgREST
    environment:
      API_URL: >-
        https://${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}/api
      BASE_URL: /doc/open-api
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.swagger-ui-https-redirect.entrypoints: http
      traefik.http.routers.swagger-ui-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.swagger-ui-https-redirect.middlewares: swagger-ui-https-redirect
      traefik.http.middlewares.swagger-ui-https-redirect.redirectscheme.scheme: https
      traefik.http.services.swagger-ui-https-redirect.loadbalancer.server.port: 8080
      traefik.http.routers.swagger-ui.entrypoints: https
      traefik.http.routers.swagger-ui.tls.certresolver: default
      traefik.http.routers.swagger-ui.rule: >-
        Host(`${EP_EXECENV:-sandbox}.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
        && PathPrefix(`/doc/open-api`)
  prometheus:
    container_name: middleware-rdbms-auto-baas_prometheus
    image: 'prom/prometheus:latest'
    restart: always
    volumes:
      - '${PWD}/prometheus.yml:/etc/prometheus/prometheus.yml:ro'
    networks:
      - network
  promscale:
    container_name: middleware-rdbms-auto-baas_promscale
    image: 'timescale/promscale:latest'
    restart: always
    depends_on:
      - prometheus
    environment:
      PROMSCALE_DB_CONNECT_RETRIES: '10'
      PROMSCALE_WEB_TELEMETRY_PATH: /metrics-text
      PROMSCALE_DB_URI: >-
        postgres://${POSTGRESQLENGINE_OWNER_USER}:${POSTGRESQLENGINE_OWNER_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_PROMSCALE_DB}?sslmode=disable
    networks:
      - network
  github-exporter:
    container_name: middleware-rdbms-auto-baas_github-exporter
    image: 'infinityworks/github-exporter:latest'
    restart: always
    ports:
      - '9171:9171'
    environment:
      REPOS: '${GITHUB_EXPORTER_REPOS}'
      GITHUB_TOKEN: '${GITHUB_EXPORTER_TOKEN}'
    networks:
      - network
  pgsvc-exporter:
    container_name: middleware-rdbms-auto-baas_pgsvc-exporter
    image: 'weaponry/pgscv:latest'
    restart: always
    ports:
      - '9890:9890'
    environment:
      PGSCV_LISTEN_ADDRESS: '0.0.0.0:9890'
      PGSCV_DISABLE_COLLECTORS: system
      DATABASE_DSN: >-
        postgres://${POSTGRESQLENGINE_OWNER_USER}:${POSTGRESQLENGINE_OWNER_PASSWORD}@${POSTGRESQLENGINE_HOST}:5432/${POSTGRESQLENGINE_DB}
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.pgsvc-exporter-https-redirect.entrypoints: http
      traefik.http.routers.pgsvc-exporter-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.pgsvc-exporter-https-redirect.middlewares: pgsvc-exporter-https-redirect
      traefik.http.middlewares.pgsvc-exporter-https-redirect.redirectscheme.scheme: https
      traefik.http.services.pgsvc-exporter-https-redirect.loadbalancer.server.port: 9890
      traefik.http.routers.pgsvc-exporter.entrypoints: https
      traefik.http.routers.pgsvc-exporter.tls.certresolver: default
      traefik.http.routers.pgsvc-exporter.rule: >-
        Host(`${EP_EXECENV:-sandbox}.pgsvc-exporter.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  keycloak:
    container_name: middleware-rdbms-auto-baas_keycloak
    image: 'jboss/keycloak:14.0.0'
    restart: always
    environment:
      DB_VENDOR: postgres
      DB_ADDR: '${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}'
      DB_DATABASE: '${POSTGRESQLENGINE_KEYCLOAK_DB}'
      DB_USER: '${POSTGRESQLENGINE_OWNER_USER}'
      DB_PASSWORD: '${POSTGRESQLENGINE_OWNER_PASSWORD}'
      KEYCLOAK_USER: '${KEYCLOAK_ADMIN_USER}'
      KEYCLOAK_PASSWORD: '${KEYCLOAK_ADMIN_PASSWORD}'
      PROXY_ADDRESS_FORWARDING: 'true'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.keycloak-https-redirect.entrypoints: http
      traefik.http.routers.keycloak-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.keycloak-https-redirect.middlewares: keycloak-https-redirect
      traefik.http.middlewares.keycloak-https-redirect.redirectscheme.scheme: https
      traefik.http.services.keycloak-https-redirect.loadbalancer.server.port: 8080
      traefik.http.routers.keycloak.entrypoints: https
      traefik.http.routers.keycloak.tls.certresolver: default
      traefik.http.routers.keycloak.rule: >-
        Host(`${EP_EXECENV:-sandbox}.keycloak.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  pushGateway:
    container_name: middleware-rdbms-auto-baas_pushGateway
    image: 'prom/pushgateway:latest'
    restart: always
    depends_on:
      - prometheus
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.pushGateway-https-redirect.entrypoints: http
      traefik.http.routers.pushGateway-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.pushGateway-https-redirect.middlewares: pushGateway-https-redirect
      traefik.http.middlewares.pushGateway-https-redirect.redirectscheme.scheme: https
      traefik.http.services.pushGateway-https-redirect.loadbalancer.server.port: 9091
      traefik.http.routers.pushGateway.entrypoints: https
      traefik.http.routers.pushGateway.tls.certresolver: default
      traefik.http.routers.pushGateway.rule: >-
        Host(`${EP_EXECENV:-sandbox}.pg-prom.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.http.routers.pushGateway.middlewares: pushGateway-auth
      traefik.http.middlewares.pushGateway-auth.basicauth.users: >-
        ${PGDCP_PUSHGATEWAY_BASIC_AUTH_USER}:${PGDCP_PUSHGATEWAY_BASIC_AUTH_HT_PASSWORD}
  unleash:
    container_name: middleware-rdbms-auto-baas_unleash
    image: 'unleashorg/unleash-server:4.2.2-node14-alpine'
    restart: always
    environment:
      DATABASE_URL: >-
        postgres://${POSTGRESQLENGINE_OWNER_USER}:${POSTGRESQLENGINE_OWNER_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_UNLEASH_DB}?sslmode=disable
      UNLEASH_URL: >-
        http://${EP_EXECENV:-sandbox}.unleash.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.unleash-https-redirect.entrypoints: http
      traefik.http.routers.unleash-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.unleash-https-redirect.middlewares: unleash-https-redirect
      traefik.http.middlewares.unleash-https-redirect.redirectscheme.scheme: https
      traefik.http.services.unleash-https-redirect.loadbalancer.server.port: 4242
      traefik.http.routers.unleash.entrypoints: https
      traefik.http.routers.unleash.tls.certresolver: default
      traefik.http.routers.unleash.rule: >-
        Host(`${EP_EXECENV:-sandbox}.unleash.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  openproject:
    container_name: middleware-rdbms-auto-baas_openproject
    image: 'openproject/community:12'
    restart: always
    environment:
      SECRET_KEY_BASE: '${PGDCP_OP_SECRET_KEY_BASE}'
      DATABASE_URL: >-
        postgres://${POSTGRESQLENGINE_OWNER_USER}:${POSTGRESQLENGINE_OWNER_PASSWORD}@${POSTGRESQLENGINE_HOST}:${POSTGRESQLENGINE_PORT}/${POSTGRESQLENGINE_OPENPROJECT_DB}?sslmode=disable
    volumes:
      - 'openproject-storage:/var/openproject/assets'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.openproject-https-redirect.entrypoints: http
      traefik.http.routers.openproject-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.openproject-https-redirect.middlewares: openproject-https-redirect
      traefik.http.middlewares.openproject-https-redirect.redirectscheme.scheme: https
      traefik.http.services.openproject-https-redirect.loadbalancer.server.port: 8080
      traefik.http.routers.openproject.entrypoints: https
      traefik.http.routers.openproject.tls.certresolver: default
      traefik.http.routers.openproject.rule: >-
        Host(`${EP_EXECENV:-sandbox}.openproject.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
  openLdap:
    container_name: middleware-rdbms-auto-baas_openLdap
    image: 'osixia/openldap:1.5.0'
    restart: always
    ports:
      - '${OPENLDAP_PGDCP_EXPOSE_PORT:-389}:389'
    environment:
      LDAP_DOMAIN: '${OPENLDAP_PGDCP_DOMAIN}'
      LDAP_ADMIN_PASSWORD: '${OPENLDAP_PGDCP_ADMIN_PASSWORD}'
      LDAP_CONFIG_PASSWORD: '${OPENLDAP_PGDCP_ADMIN_PASSWORD}'
    volumes:
      - 'openldap_storage-lib:/var/lib/ldap'
      - 'openldap_storage-etc:/etc/ldap/slapd.d'
      - 'openldap_storage-cert:/container/service/slapd/assets/certs'
    networks:
      - network
  reverse-proxy:
    container_name: middleware-rdbms-auto-baas_reverse-proxy
    image: 'traefik:2.2'
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '8099:8080'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './acme.json:/acme.json'
    networks:
      - network
    command:
      - '--providers.docker=true'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.exposedByDefault=false'
      - '--api.dashboard=true'
      - '--api.insecure=true'
      - '--accesslog=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.https.address=:443'
      - '--certificatesResolvers.default.acme.email=${LETSENCRYPT_SSL_EMAIL_ID}'
      - '--certificatesResolvers.default.acme.storage=/acme.json'
      - '--certificatesResolvers.default.acme.httpchallenge=true'
      - '--certificatesresolvers.default.acme.httpchallenge.entrypoint=http'
      - '--entryPoints.https.forwardedHeaders.insecure'
networks:
  network:
    external:
      name: middleware-rdbms-auto-baas
volumes:
  postgraphileupload-storage: {}
  openproject-storage: {}
  openldap_storage-lib: {}
  openldap_storage-etc: {}
  openldap_storage-cert: {}
