# Code generated by Netspective IGS. DO NOT EDIT.

#
# Environment variables allowed:
#   * GITLAB_JWKS_URI - GitLab JSON Web Key Set URL endpoint, eg:- https://git.netspective.io/oauth/discovery/keys (required)
#   * HOST_MACHINE_IP - IP of host machine for using in traefik contianer as hosts entry. (required)
#   * EP_EXECENV - Endpoints' execution environment name like sandbox, devl, test, demo, or prod (default sandbox)
#   * EP_BOUNDARY - Endpoints' name of application or service (default appx)
#   * EP_FQDNSUFFIX - Endpoints' Fully qualified domain name suffix (default docker.localhost)

version: '3.3'
services:
  postgres-exporter:
    container_name: middleware-rdbms-auto-baas_postgres-exporter
    image: quay.io/prometheuscommunity/postgres-exporter
    restart: always
    ports:
      - '9187:9187'
    environment:
      DATA_SOURCE_NAME: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:5432/${POSTGRESQLENGINE_DB}?sslmode=disable
    networks:
      - network
    labels:
      traefik.http.routers.postgres-exporter.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postgres-exporter.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.postgres-exporter.loadbalancer.server.port: 9187
  postGraphile:
    container_name: middleware-rdbms-auto-baas_postGraphile
    build:
      context: .
      dockerfile: Dockerfile-postGraphile
    image: 'middleware-rdbms-auto-baas_postgraphile:latest'
    restart: always
    networks:
      - network
    command:
      - '--cors'
      - '--connection'
      - >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:5432/${POSTGRESQLENGINE_DB}
      - '--host'
      - 0.0.0.0
      - '--schema'
      - public
      - '--retry-on-init-fail'
      - '--graphiql'
      - /
      - '--enhance-graphiql'
      - '--simple-collections'
      - both
      - '--append-plugins'
      - >-
        @graphile-contrib/pg-simplify-inflector,postgraphile-plugin-connection-filter,@graphile-contrib/pg-order-by-related
    labels:
      traefik.http.routers.postGraphile.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postGraphile.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
  postgREST:
    container_name: middleware-rdbms-auto-baas_postgREST
    image: postgrest/postgrest
    restart: always
    environment:
      PGRST_DB_URI: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@${POSTGRESQLENGINE_HOST}:5432/${POSTGRESQLENGINE_DB}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: '${POSTGRESQLENGINE_USER}'
    networks:
      - network
    labels:
      traefik.http.routers.postgREST.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postgREST.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.postgREST.loadbalancer.server.port: 3000
  adminer-app:
    container_name: middleware-rdbms-auto-baas_adminer-app
    image: adminer
    restart: always
    environment:
      ADMINER_DESIGN: pepa-linha
    networks:
      - network
    labels:
      traefik.http.routers.adminer-app.rule: >-
        Host(`${EP_EXECENV:-sandbox}.adminer-app.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.adminer-app.loadbalancer.server.port: 8080
  jwt-validator:
    container_name: middleware-rdbms-auto-baas_jwt-validator
    image: 'node:12'
    restart: always
    expose:
      - '3000'
    environment:
      GITLAB_JWKS_URI: '${GITLAB_JWKS_URI}'
    volumes:
      - './jwt-validator.sh:/jwt-validator.sh:ro'
    networks:
      - network
    command:
      - /jwt-validator.sh
    labels:
      traefik.http.routers.jwt-validator.rule: >-
        Host(`${EP_EXECENV:-sandbox}.jwt-validator.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.jwt-validator.loadbalancer.server.port: 3000
  graphql-exporter:
    container_name: middleware-rdbms-auto-baas_graphql-exporter
    image: quay.io/ricardbejarano/graphql_exporter
    restart: always
    ports:
      - '9199:9199'
    networks:
      - network
    labels:
      traefik.http.routers.graphql-exporter.rule: >-
        Host(`${EP_EXECENV:-sandbox}.graphql-exporter.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.graphql-exporter.loadbalancer.server.port: 9199
  reverse-proxy:
    container_name: middleware-rdbms-auto-baas_reverse-proxy
    image: 'traefik:2.2'
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '8099:8080'
    depends_on:
      - postgres-exporter
      - postGraphile
      - postgREST
      - adminer-app
      - jwt-validator
      - graphql-exporter
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    extra_hosts:
      - >-
        ${EP_EXECENV:-sandbox}.jwt-validator.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}:${HOST_MACHINE_IP}
    networks:
      - network
    command:
      - '--providers.docker'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.exposedByDefault=false'
      - '--api.dashboard=true'
      - '--api.insecure=true'
      - '--entrypoints.http.address=:80'
      - '--entryPoints.http.forwardedHeaders.insecure'
networks:
  network:
    external:
      name: middleware-rdbms-auto-baas
