# Code generated by Netspective IGS. DO NOT EDIT.

# Mutable volumes to be mindful of:
#   gitlabConfig-storage: GitLab container configuration
#   gitlabLogs-storage: GitLab container log content
#   gitlabData-storage: GitLab container data content
#
# Environment variables allowed:
#   * PGREST_DB_URI - example: postgres://user:passwor@containername:5432/dbname. You can use domain name instead of container name.Please change the port if PosgreSQL is using different port (required)
#   * PGREST_DB_SCHEMA - Schema of GitLab database (required)
#   * PGREST_DB_USER - User name of GitLab database (required)
#   * LETSENCRYPT_SSL_EMAIL_ID - Email id for ACME Let's Encrypt certificates for https endpoints (required)
#   * EP_EXECENV - Endpoints' execution environment name like sandbox, devl, test, demo, or prod (default sandbox)
#   * EP_BOUNDARY - Endpoints' name of application or service (default appx)
#   * EP_FQDNSUFFIX - Endpoints' Fully qualified domain name suffix (default docker.localhost)

version: '3.3'
services:
  gitlab:
    container_name: middleware-rdbms-auto-baas_gitlab
    hostname: >-
      ${EP_EXECENV:-sandbox}.gitLab.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}
    image: 'gitlab/gitlab-ee:latest'
    restart: always
    ports:
      - '8085:80'
    environment:
      GITLAB_OMNIBUS_CONFIG: >-
        external_url
        'https://${EP_EXECENV:-sandbox}.gitLab.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}';
        nginx['listen_port'] = 80; nginx['listen_https'] = false;
        nginx['enable'] = true; nginx['redirect_http_to_https'] = true;
        nginx['listen_addresses'] = ['0.0.0.0']
    volumes:
      - 'gitlabConfig-storage:/etc/gitlab'
      - 'gitlabLogs-storage:/var/log/gitlab'
      - 'gitlabData-storage:/var/opt/gitlab'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.gitlab-https-redirect.entrypoints: http
      traefik.http.routers.gitlab-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.gitlab-https-redirect.middlewares: gitlab-https-redirect
      traefik.http.middlewares.gitlab-https-redirect.redirectscheme.scheme: https
      traefik.http.services.gitlab-https-redirect.loadbalancer.server.port: 80
      traefik.http.routers.gitlab.entrypoints: https
      traefik.http.routers.gitlab.rule: >-
        Host(`${EP_EXECENV:-sandbox}.gitlab.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.http.routers.gitlab.tls.certresolver: default
  postgREST:
    container_name: middleware-rdbms-auto-baas_postgREST
    image: postgrest/postgrest
    restart: always
    environment:
      PGRST_DB_URI: '${PGREST_DB_URI}'
      PGRST_DB_SCHEMA: '${PGREST_DB_SCHEMA:-gitlab}'
      PGRST_DB_ANON_ROLE: '${PGREST_DB_USER:-gitlab}'
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.postgREST-https-redirect.entrypoints: http
      traefik.http.routers.postgREST-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.postgREST-https-redirect.middlewares: postgREST-https-redirect
      traefik.http.middlewares.postgREST-https-redirect.redirectscheme.scheme: https
      traefik.http.services.postgREST-https-redirect.loadbalancer.server.port: 3000
      traefik.http.routers.postgREST.entrypoints: https
      traefik.http.routers.postgREST.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postgREST.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.http.routers.postgREST.tls.certresolver: default
  swagger-ui:
    container_name: middleware-rdbms-auto-baas_swagger-ui
    image: swaggerapi/swagger-ui
    restart: always
    depends_on:
      - postgREST
    environment:
      API_URL: >-
        http://${EP_EXECENV:-sandbox}.postgREST.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}/
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.swagger-ui-https-redirect.entrypoints: http
      traefik.http.routers.swagger-ui-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.swagger-ui-https-redirect.middlewares: swagger-ui-https-redirect
      traefik.http.middlewares.swagger-ui-https-redirect.redirectscheme.scheme: https
      traefik.http.services.swagger-ui-https-redirect.loadbalancer.server.port: 8080
      traefik.http.routers.swagger-ui.entrypoints: https
      traefik.http.routers.swagger-ui.rule: >-
        Host(`${EP_EXECENV:-sandbox}.swagger-ui.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.http.routers.swagger-ui.tls.certresolver: default
  adminer-app:
    container_name: middleware-rdbms-auto-baas_adminer-app
    image: adminer
    restart: always
    environment:
      ADMINER_DESIGN: pepa-linha
    networks:
      - network
    labels:
      traefik.enable: true
      traefik.docker.network: network
      traefik.http.routers.adminer-app-https-redirect.entrypoints: http
      traefik.http.routers.adminer-app-https-redirect.rule: 'HostRegexp(`{any:.*}`)'
      traefik.http.routers.adminer-app-https-redirect.middlewares: adminer-app-https-redirect
      traefik.http.middlewares.adminer-app-https-redirect.redirectscheme.scheme: https
      traefik.http.services.adminer-app-https-redirect.loadbalancer.server.port: 8080
      traefik.http.routers.adminer-app.entrypoints: https
      traefik.http.routers.adminer-app.rule: >-
        Host(`${EP_EXECENV:-sandbox}.adminer-app.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.http.routers.adminer-app.tls.certresolver: default
  reverse-proxy:
    container_name: middleware-rdbms-auto-baas_reverse-proxy
    image: 'traefik:2.2'
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '8099:8080'
    depends_on:
      - postgREST
      - swagger-ui
      - adminer-app
      - gitlab
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - './acme.json:/acme.json'
    networks:
      - network
    command:
      - '--providers.docker=true'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.exposedByDefault=false'
      - '--api.dashboard=true'
      - '--api.insecure=true'
      - '--accesslog=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.https.address=:443'
      - '--certificatesResolvers.default.acme.email=${LETSENCRYPT_SSL_EMAIL_ID}'
      - '--certificatesResolvers.default.acme.storage=/acme.json'
      - '--certificatesResolvers.default.acme.httpchallenge=true'
      - '--certificatesresolvers.default.acme.httpchallenge.entrypoint=http'
      - '--entryPoints.https.forwardedHeaders.insecure'
networks:
  network:
    external:
      name: middleware-rdbms-auto-baas
volumes:
  gitlabConfig-storage: {}
  gitlabLogs-storage: {}
  gitlabData-storage: {}
