# Code generated by Netspective IGS. DO NOT EDIT.

# Mutable volumes to be mindful of:
#   postgresqlengine-storage: Irrecoverable user generated and transactional content
#   elasticSearchEngine-storage: Irrecoverable user generated search content
#   portainer-storage: Recoverable container configuration
#
# Environment variables allowed:
#   * POSTGRESQLENGINE_DB - Postgres database name (required)
#   * POSTGRESQLENGINE_USER - Postgres database user, default (required)
#   * POSTGRESQLENGINE_PASSWORD - Postgres user password (required)
#   * GITLAB_JWKS_URI - GitLab JSON Web Key Set URL endpoint, eg:- https://git.netspective.io/oauth/discovery/keys (required)
#   * HOST_MACHINE_IP - IP of host machine for using in traefik contianer as hosts entry. (required)
#   * EP_EXECENV - Endpoints' execution environment name like sandbox, devl, test, demo, or prod (default sandbox)
#   * EP_BOUNDARY - Endpoints' name of application or service (default appx)
#   * EP_FQDNSUFFIX - Endpoints' Fully qualified domain name suffix (default docker.localhost)
#   * POSTGRESQLENGINE_PUBL_PORT - PostgreSQL Engine published port (default 5432)

version: '3.3'
services:
  postgresqlengine:
    container_name: middleware-rdbms-auto-baas_postgresqlengine
    build:
      context: .
      dockerfile: Dockerfile-postgreSqlEngine
    image: 'middleware-rdbms-auto-baas_postgresqlengine:latest'
    restart: always
    ports:
      - '${POSTGRESQLENGINE_PUBL_PORT:-5432}:5432'
    environment:
      POSTGRES_DB: '${POSTGRESQLENGINE_DB}'
      POSTGRES_USER: '${POSTGRESQLENGINE_USER}'
      POSTGRES_PASSWORD: '${POSTGRESQLENGINE_PASSWORD}'
    volumes:
      - 'postgresqlengine-storage:/var/lib/postgresql/data'
      - './initdb.d:/docker-entrypoint-initdb.d:ro'
    networks:
      - network
  postGraphile:
    container_name: middleware-rdbms-auto-baas_postGraphile
    build:
      context: .
      dockerfile: Dockerfile-postGraphile
    image: 'middleware-rdbms-auto-baas_postgraphile:latest'
    restart: always
    depends_on:
      - postgresqlengine
    networks:
      - network
    command:
      - '--cors'
      - '--connection'
      - >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@postgresqlengine:${POSTGRESQLENGINE_PUBL_PORT:-5432}/${POSTGRESQLENGINE_DB}
      - '--host'
      - 0.0.0.0
      - '--schema'
      - public
      - '--retry-on-init-fail'
      - '--graphiql'
      - /
      - '--enhance-graphiql'
      - '--simple-collections'
      - both
      - '--append-plugins'
      - >-
        @graphile-contrib/pg-simplify-inflector,postgraphile-plugin-connection-filter,@graphile-contrib/pg-order-by-related
    labels:
      traefik.http.routers.postGraphile.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postGraphile.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
  hasura:
    container_name: middleware-rdbms-auto-baas_hasura
    image: hasura/graphql-engine
    restart: always
    expose:
      - '8080'
    depends_on:
      - postgresqlengine
    environment:
      HASURA_GRAPHQL_DATABASE_URL: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@postgresqlengine:${POSTGRESQLENGINE_PUBL_PORT:-5432}/${POSTGRESQLENGINE_DB}
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'true'
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: 'startup,http-log,webhook-log,websocket-log,query-log'
    networks:
      - network
    labels:
      traefik.http.routers.hasura.rule: >-
        Host(`${EP_EXECENV:-sandbox}.hasura.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.hasura.loadbalancer.server.port: 8080
  postgREST:
    container_name: middleware-rdbms-auto-baas_postgREST
    image: postgrest/postgrest
    restart: always
    depends_on:
      - postgresqlengine
    environment:
      PGRST_DB_URI: >-
        postgres://${POSTGRESQLENGINE_USER}:${POSTGRESQLENGINE_PASSWORD}@postgresqlengine:${POSTGRESQLENGINE_PUBL_PORT:-5432}/${POSTGRESQLENGINE_DB}
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: '${POSTGRESQLENGINE_USER}'
    networks:
      - network
    labels:
      traefik.http.routers.postgREST.rule: >-
        Host(`${EP_EXECENV:-sandbox}.postgREST.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.postgREST.loadbalancer.server.port: 3000
  swagger-ui:
    container_name: middleware-rdbms-auto-baas_swagger-ui
    image: swaggerapi/swagger-ui
    restart: always
    depends_on:
      - postgREST
    environment:
      API_URL: >-
        http://${EP_EXECENV:-sandbox}.postgREST.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}/
    networks:
      - network
    labels:
      traefik.http.routers.swagger-ui.rule: >-
        Host(`${EP_EXECENV:-sandbox}.swagger-ui.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.swagger-ui.loadbalancer.server.port: 8080
  elasticSearchEngine:
    container_name: middleware-rdbms-auto-baas_elasticSearchEngine
    image: 'docker.elastic.co/elasticsearch/elasticsearch:7.7.0'
    restart: always
    ports:
      - '9200:9200'
      - '9300:9300'
    environment:
      discovery.type: single-node
    volumes:
      - 'elasticSearchEngine-storage:/usr/share/elasticsearch'
    networks:
      - network
    labels:
      traefik.http.routers.elasticSearchEngine.rule: >-
        Host(`${EP_EXECENV:-sandbox}.elasticSearchEngine.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.elasticSearchEngine.loadbalancer.server.port: 9200
  telemetry:
    container_name: middleware-rdbms-auto-baas_telemetry
    image: jaegertracing/all-in-one
    restart: always
    ports:
      - '5775:5775/udp'
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '14268:14268'
      - '9411:9411'
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
      SPAN_STORAGE_TYPE: elasticsearch
      ES_SERVER_URLS: 'http://elasticSearchEngine:9200'
    networks:
      - network
    labels:
      traefik.http.routers.telemetry.rule: >-
        Host(`${EP_EXECENV:-sandbox}.telemetry.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.telemetry.loadbalancer.server.port: 16686
  pgAdmin:
    container_name: middleware-rdbms-auto-baas_pgAdmin
    image: dpage/pgadmin4
    restart: always
    depends_on:
      - postgresqlengine
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@docker.localhost
      PGADMIN_DEFAULT_PASSWORD: devl
    networks:
      - network
    labels:
      traefik.http.routers.pgAdmin.rule: >-
        Host(`${EP_EXECENV:-sandbox}.pgAdmin.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
  adminer-app:
    container_name: middleware-rdbms-auto-baas_adminer-app
    image: adminer
    restart: always
    depends_on:
      - postgresqlengine
    environment:
      ADMINER_DESIGN: pepa-linha
    networks:
      - network
    labels:
      traefik.http.routers.adminer-app.rule: >-
        Host(`${EP_EXECENV:-sandbox}.adminer-app.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.adminer-app.loadbalancer.server.port: 8080
  queryTree:
    container_name: middleware-rdbms-auto-baas_queryTree
    image: d4software/querytree
    restart: always
    depends_on:
      - postgresqlengine
    networks:
      - network
    labels:
      traefik.http.routers.queryTree.rule: >-
        Host(`${EP_EXECENV:-sandbox}.queryTree.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.queryTree.loadbalancer.server.port: 80
  portainer:
    container_name: middleware-rdbms-auto-baas_portainer
    image: portainer/portainer
    restart: always
    ports:
      - '9000:9000'
      - '8000:8000'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'portainer-storage:/data'
    networks:
      - network
    command:
      - '-H'
      - 'unix:///var/run/docker.sock'
    labels:
      traefik.http.routers.portainer.rule: >-
        Host(`${EP_EXECENV:-sandbox}.portainer.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.portainer.loadbalancer.server.port: 9000
  jwt-validator:
    container_name: middleware-rdbms-auto-baas_jwt-validator
    image: 'node:12'
    restart: always
    expose:
      - '3000'
    environment:
      GITLAB_JWKS_URI: '${GITLAB_JWKS_URI}'
    volumes:
      - './jwt-validator.sh:/jwt-validator.sh:ro'
    networks:
      - network
    command:
      - /jwt-validator.sh
    labels:
      traefik.http.routers.jwt-validator.rule: >-
        Host(`${EP_EXECENV:-sandbox}.jwt-validator.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}`)
      traefik.enable: true
      traefik.http.services.jwt-validator.loadbalancer.server.port: 3000
  reverse-proxy:
    container_name: middleware-rdbms-auto-baas_reverse-proxy
    image: 'traefik:2.2'
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '8099:8080'
    depends_on:
      - postgresqlengine
      - postGraphile
      - hasura
      - postgREST
      - swagger-ui
      - elasticSearchEngine
      - telemetry
      - adminer-app
      - pgAdmin
      - queryTree
      - portainer
      - jwt-validator
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    extra_hosts:
      - >-
        ${EP_EXECENV:-sandbox}.jwt-validator.${EP_BOUNDARY:-appx}.${EP_FQDNSUFFIX:-docker.localhost}:${HOST_MACHINE_IP}
    networks:
      - network
    command:
      - '--providers.docker'
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - '--providers.docker.exposedByDefault=false'
      - '--api.dashboard=true'
      - '--api.insecure=true'
networks:
  network:
    external:
      name: middleware-rdbms-auto-baas
volumes:
  postgresqlengine-storage: {}
  elasticSearchEngine-storage: {}
  portainer-storage: {}
